/// output   = "../src/generated/prisma"
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String   @unique
  phone     String   @unique
  password  String
  role      Role     @default(SALES)
  createdAt DateTime @default(now())
  sales     Sale[]
}

model InventoryItem {
  id            Int                    @id @default(autoincrement())
  name          String
  category      String
  subtype       String?
  quantity      Int
  unit          String
  lowStockLimit Int                    @default(10)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  basePrice     Float?
  sellPrice     Float?
  limitPrice    Float?
  transactions  InventoryTransaction[]
  saleItems     SaleItem[]
}

model InventoryTransaction {
  id            Int             @id @default(autoincrement())
  itemId        Int
  type          TransactionType
  quantity      Int
  createdAt     DateTime        @default(now())
  inventoryItem InventoryItem   @relation(fields: [itemId], references: [id])
}

model Customer {
  id           Int                   @id @default(autoincrement())
  name         String
  phone        String                @unique
  createdAt    DateTime              @default(now())
  transactions CustomerTransaction[]
  sales        Sale[]
}

model Sale {
  id                  Int                   @id @default(autoincrement())
  customerId          Int
  userId              Int?
  totalAmount         Float
  discount            Float                 @default(0)
  paidAmount          Float
  paymentType         PaymentType
  notes               String?               // Optional notes for important details
  createdAt           DateTime              @default(now())
  CustomerTransaction CustomerTransaction[]
  customer            Customer              @relation(fields: [customerId], references: [id])
  user                User?                 @relation(fields: [userId], references: [id])
  items               SaleItem[]
}

model SaleItem {
  id       Int           @id @default(autoincrement())
  saleId   Int
  itemId   Int
  quantity Float
  price    Float
  item     InventoryItem @relation(fields: [itemId], references: [id])
  sale     Sale          @relation(fields: [saleId], references: [id])
}

model CustomerTransaction {
  id         Int      @id @default(autoincrement())
  customerId Int
  amount     Float
  reason     String
  createdAt  DateTime @default(now())
  saleId     Int?
  customer   Customer @relation(fields: [customerId], references: [id])
  Sale       Sale?    @relation(fields: [saleId], references: [id])
}

enum Role {
  ADMIN
  SALES
}

enum TransactionType {
  STOCK_IN
  STOCK_OUT
}

enum PaymentType {
  CASH
  MPESA
  CARD
  TRANSFER
}

enum PaymentType_new {
  CASH
  MPESA
}
