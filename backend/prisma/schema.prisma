generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


/* Your models go here */


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String   @unique
  phone     String   @unique
  password  String
  role      Role     @default(SALES) // ðŸ‘ˆ Add this line
  createdAt DateTime @default(now())

  sales     Sale[]   // reverse relation
}

enum Role {
  ADMIN
  SALES
}


model InventoryItem {
  id             Int                     @id @default(autoincrement())
  name           String
  category       String                  // e.g. meat, spice, egg
  subtype        String?                 // e.g. leg, boneless
  quantity       Int
  unit           String                  // e.g. kg, pcs

  basePrice      Float?                   // Cost price
  sellPrice      Float?                  // Selling price
  limitPrice     Float?                   // Minimum allowed selling price

  lowStockLimit  Int                     @default(10)
  transactions   InventoryTransaction[]
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  saleItems      SaleItem[]
}


model InventoryTransaction {
  id             Int          @id @default(autoincrement())
  itemId         Int
  type           TransactionType
  quantity       Int
  createdAt      DateTime     @default(now())
  inventoryItem  InventoryItem @relation(fields: [itemId], references: [id])
}

enum TransactionType {
  STOCK_IN
  STOCK_OUT
}


model Customer {
  id           Int                @id @default(autoincrement())
  name         String
  phone        String             @unique
  sales        Sale[]
  transactions CustomerTransaction[]
  createdAt    DateTime           @default(now())
}

model Sale {
  id           Int        @id @default(autoincrement())
  customer     Customer   @relation(fields: [customerId], references: [id])
  customerId   Int

  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?       // <- optional now

  totalAmount  Float
  discount     Float      @default(0)
  paidAmount   Float
  paymentType  PaymentType
  items        SaleItem[]
  customerTransactions CustomerTransaction[]
  createdAt    DateTime   @default(now())
}



model SaleItem {
  id        Int      @id @default(autoincrement())
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    Int
  item      InventoryItem @relation(fields: [itemId], references: [id])
  itemId    Int
  quantity  Float
  price     Float
}

model CustomerTransaction {
  id         Int       @id @default(autoincrement())
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId Int
  amount     Float     // Positive for credit, negative for debit
  reason     String
  saleId     Int?      // Reference to sale if this transaction is related to a sale
  sale       Sale?     @relation(fields: [saleId], references: [id])
  createdAt  DateTime  @default(now())
}

enum PaymentType {
  CASH
  MPESA
}
