"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailService = void 0;
const nodemailer_1 = __importDefault(require("nodemailer"));
const date_fns_1 = require("date-fns");
class EmailService {
    constructor() {
        // Configure email settings
        this.transporter = nodemailer_1.default.createTransport({
            service: 'gmail', // You can change this to other services like 'outlook', 'yahoo', etc.
            auth: {
                user: process.env.EMAIL_USER || 'your-email@gmail.com',
                pass: process.env.EMAIL_PASSWORD || 'your-app-password', // Use app password for Gmail
            },
        });
    }
    async sendDailyReport(recipientEmail, pdfBuffer, date = new Date()) {
        try {
            const formattedDate = (0, date_fns_1.format)(date, 'EEEE, MMMM dd, yyyy');
            const fileName = `daily-report-${(0, date_fns_1.format)(date, 'yyyy-MM-dd')}.pdf`;
            const mailOptions = {
                from: process.env.EMAIL_USER || 'your-email@gmail.com',
                to: recipientEmail,
                subject: `Daily Business Report - ${formattedDate}`,
                html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #f8f9fa; padding: 20px; text-align: center; border-radius: 5px;">
              <h1 style="color: #333; margin: 0;">ðŸ“Š Daily Business Report</h1>
              <p style="color: #666; margin: 10px 0 0 0;">${formattedDate}</p>
            </div>
            
            <div style="padding: 20px;">
              <p>Hello,</p>
              
              <p>Please find attached the daily business report for <strong>${formattedDate}</strong>.</p>
              
              <div style="background-color: #e9ecef; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h3 style="margin: 0 0 10px 0; color: #495057;">ðŸ“‹ Report Summary</h3>
                <ul style="margin: 0; padding-left: 20px; color: #495057;">
                  <li>Sales Summary and Metrics</li>
                  <li>Top Selling Items</li>
                  <li>Recent Sales Transactions</li>
                  <li>Profit & Loss Analysis</li>
                  <li>Inventory Status</li>
                  <li>Cash Flow Summary</li>
                  <li>Customer Analysis</li>
                </ul>
              </div>
              
              <p>This report contains comprehensive data about your business performance for the day, including:</p>
              
              <ul style="color: #495057;">
                <li>Total sales and revenue figures</li>
                <li>Profit margins and cost analysis</li>
                <li>Inventory valuation and stock levels</li>
                <li>Customer spending patterns</li>
                <li>Payment collection rates</li>
                <li>Top performing products</li>
              </ul>
              
              <p>If you have any questions about this report or need additional information, please don't hesitate to contact us.</p>
              
              <p>Best regards,<br>
              <strong>Butchery Management System</strong></p>
              
              <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
              <p style="font-size: 12px; color: #6c757d; text-align: center;">
                This is an automated email generated by the Butchery Management System.<br>
                Please do not reply to this email.
              </p>
            </div>
          </div>
        `,
                attachments: [
                    {
                        filename: fileName,
                        content: pdfBuffer,
                        contentType: 'application/pdf',
                    },
                ],
            };
            const result = await this.transporter.sendMail(mailOptions);
            console.log('Daily report email sent successfully:', result.messageId);
            return true;
        }
        catch (error) {
            console.error('Error sending daily report email:', error);
            return false;
        }
    }
    async sendTestEmail(recipientEmail) {
        try {
            const mailOptions = {
                from: process.env.EMAIL_USER || 'your-email@gmail.com',
                to: recipientEmail,
                subject: 'Test Email - Butchery Management System',
                html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #f8f9fa; padding: 20px; text-align: center; border-radius: 5px;">
              <h1 style="color: #333; margin: 0;">âœ… Email Configuration Test</h1>
            </div>
            
            <div style="padding: 20px;">
              <p>Hello,</p>
              
              <p>This is a test email to verify that the email configuration for the Butchery Management System is working correctly.</p>
              
              <div style="background-color: #d4edda; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h3 style="margin: 0; color: #155724;">ðŸŽ‰ Success!</h3>
                <p style="margin: 10px 0 0 0; color: #155724;">
                  Your email configuration is working properly. Daily reports will be sent automatically at midnight.
                </p>
              </div>
              
              <p>If you received this email, it means:</p>
              <ul style="color: #495057;">
                <li>Email service is properly configured</li>
                <li>SMTP settings are correct</li>
                <li>Authentication is working</li>
                <li>Daily reports will be sent automatically</li>
              </ul>
              
              <p>Best regards,<br>
              <strong>Butchery Management System</strong></p>
            </div>
          </div>
        `,
            };
            const result = await this.transporter.sendMail(mailOptions);
            console.log('Test email sent successfully:', result.messageId);
            return true;
        }
        catch (error) {
            console.error('Error sending test email:', error);
            return false;
        }
    }
}
exports.EmailService = EmailService;
